---
    author: Ferando Alberto Miranda Bonomi
    title: Apunte breve de arquitectura de computadora
    date: last-modified
    date-format: iso
    number-sections: true
    bibliography: bibliografia.bib
---

## Arquitectura de computadora y microarquitectura u organización de la computadora

La arquitectura de computadora define la organización lógica y el comportamiento de una computadora. Esto incluye la organización de memoria, registros y conjunto de instrucciones. Suele usarse como sinónimo el término *arquitectura del conjunto de instrucciones* (Instruction Set Architecture, ISA) de la computadora. La arquitectura de computadora define los registros, las operaciones, su codificación, efectos y modos de acceso a memoria y periféricos [@stallings19].

La organización de la computadora o microarquitectura determina la forma en que se implementa la arquitectura de computadora en hardware. Define componentes, conexionado, interfaces y todo otro detalle necesario para la implementación de las características especificadas por la arquitectura [@stallings19].

Una misma arquitectura es usualmente implementada por distintas microarquitecturas con diversas características y rendimiento. Por ejemplo, las microarquitecturas de los procesadores Intel Atom e Intel Core i9 implementan la misma arquitectura x86-64. Ambos pueden ejecutar el mismo código y desde el punto de vista del programador pueden ser tratados hasta cierto punto de manera uniforme, pero sus características y rendimiento son muy diferentes.

## Computadora, CPU, microprocesador y microcontrolador

Una computadora es un sistema de procesamiento de datos que incluye unidad central de proceso (CPU, Central Processing Unit),  memoria principal, y periféricos de entrada/salida. La unidad central de proceso ejecuta los programas, que incluyen operaciones de control, de acceso a memoria principal y proceso de datos. La memoria principal contiene los datos y programas, la memoria de programa puede ser separada de la memoria de datos. Los perifericos de entrada/salida permiten comunicar a la computadora con los usuarios (interfaz de usuario), con almacenes de datos secundarios (memorias no volátiles, discos de estado sólido, etc), y con otras máquinas (interfaces de red, puertos de comunicación). Las computadoras modernas suelen tener varias CPU que comparten la memoria principal y los periféricos de entrada/salida, característica denominada multiprocesamiento de memoria compartida. 

Un microprocesador es un circuito integrado monolítico que implementa la microarquitectura de una o más unidades centrales de proceso. Los microprocesadores modernos incluyen en el mismo componente varias CPU, llamadas núcleos, y memorias cache (memorias de acceso muy rápido que mantiene copias locales de los datos y programa almacenados en memoria principal, sincronizándose con la misma mediante transferencias de bloques relativamente grandes y más eficientes que los accesos a memoria individuales).

Un microcontrolador es un circuito integrado que implementa una microarquitectura de computadora completa incluyendo una o más CPUs, memoria principal y periféricos. La memoria principal está dividida en memoria de programa no volátil (usualmente Flash) y memoria de datos volátil (usualmente SRAM). Los periféricos integrados incluyen puertos de entrada/salida lógicos (GPIO, General Purpose Input/Output), controladores de interrupción, controladores de acceso directo a memoria (DMA, Direct Memory Access), puertos de comunicación, memorias secundarias (EEPROM o Flash), conversores analógico/digital, conversores digital/analógico y temporizadores.

## Bus de computadora

El término *bus* (del latín *omnibus*, para todo) se refiere a una conexión entre dos o más componentes en un sistema de cómputo. Es implementado por conjuntos de conductores paralelos o *líneas* que transportan información de *dirección*, *control* y *datos*, operando en forma sincrónica con un *reloj*. Los componentes conectados a un bus tienen un orden jerárquico con roles de *maestro* y *esclavo*. Hay uno o más maestros y uno o más esclavos. En cada momento dado solo un maestro puede estar activo o tener control del bus. El proceso de decisión que permite a un maestro tomar control del bus se denomina arbitraje, producido por un componente denominado árbitro. Cada esclavo en el bus tiene una dirección asociada que lo selecciona como el esclavo activo, esta dirección está compuesta por parte de las líneas de dirección. El bus incluye un componente denominado decodificador que genera la señal de habilitación para el esclavo seleccionado. El resto de las líneas de dirección permiten seleccionar una dirección interna al esclavo. Si el esclavo es una memoria entonces la dirección selecciona el elemento de memoria a leer o escribir. Si el esclavo es un periférico la dirección selecciona un registro interno a leer o escribir. Los datos son transferidos mediante las líneas de datos. Si el bus es *bidireccional* las líneas de datos se comparten en las operaciones de lectura y escritura, usando lógica de tres estados. Si el bus es *unidireccional* entonces hay líneas de datos dedicadas para lectura y escritura. Un bus es *paralelo* si los bits de datos que componen una palabra se transmiten simultáneamente en líneas paralelas. Un bus es *serial* si la transmisión es de un bit por vez.

El maestro establece las líneas de dirección y las líneas de control que solicitan el uso del bus. El árbitro decide que maestro tiene uso del bus cuando hay más de una solicitud. En la @fig-bus-bindal19, tomada de [@bindal19], se muestra un bus unidireccional paralelo.

![Estructura de bus unidireccional](bus-unidir-bindal19.png){#fig-bus-bindal19}

El bus configura un *espacio de direcciones*, y cada componente conectado implementa un *rango de direcciones* dentro de dicho espacio. Por ejemplo, en el procesador STM32F103C8 el espacio de dirección es de 32 bits, la memoria de programa está ubicada en el rango `0x08000000` a `0x0800FFFF` (está además conectada al bus de instrucciones separado, lo que permite ejecutar dos accesos simultáneos a esta memoria), la memoria de datos en el rango `0x20000000` a `0x20004FFF`, el bus periférico (conectado al principal mediante un componente "puente") entre `0x40000000` y `0x400233FF`, etc. Los periféricos propios de la microarquitectura Cortex-M3 (SysTick, NVIC, etc.) están ubicados en el rango `0xE0000000` a `0xE00FFFFF`.

Los buses internos (dentro del chip) de alta velocidad suelen ser paralelos y unidireccionales (tal es el caso del bus AHB de los Cortex-M3) por razones de rendimiento. Los buses donde se conectan los periféricos son de menor rendimiento y pueden ser bidireccionales (como es el caso del APB de los Cortex-M3). Los periféricos externos a un microcontrolador suelen conectarse mediante buses seriales, que pueden ser unidireccionales (como el bus SPI) o bidireccionales (como el bus I2C).

## Registros del procesador

Un registro es una de memoria interna al procesador capaz de almacenar un valor numérico. Dependiendo de la arquitectura del procesador puede haber uno o más registros, de propósito general o con funciones especiales. En el caso de las máquinas *RISC* usualmente hay varios registros de propósito general, a fin de facilitar el diseño de compiladores eficientes para lenguajes de alto nivel [@hennessy_patterson].

## Memoria principal

La memoria principal de la computadora es una memoria de datos de gran capacidad. En ella se mantiene la información con la que trabaja el programa. El procesador no puede operar directamente con los datos almacenados sino que debe cargarlos en espacios de memoria internos, registros, para poder realizar las operaciones y luego almacenar, de ser necesario, los resultados en la memoria principal. En el caso de máquinas *RISC* las operaciones de carga y almacenmiento son separadas de las operaciónes de procesamiento de datos. En computadoras *CISC* las instrucciones de procesamiento de datos efectúan también carga y almacenamiento en forma transparente al programador,usando registros internos para mantener los valores durante la etapa de procesamiento.

## Memoria de programa

Es la memoria que contiene el programa a ejecutar. En una máquina de microarquitectura Von Newmann la memoria de programa es parte de la memoria principal. En una máquina de microarquitectura Hardvard la memoria de programa está conectada a un bus diferente al de la memoria principal. En el caso de los procesadores ARM Cortex-M3 la memoria de programa está conectada tanto a un bus de instrucciones, usado por el procesador para cargar las instrucciones a ejecutar, como a un bus de datos, que comparte con la memoria principal y los periféricos. Es por ello que la memoria de programa puede ser accedida de la misma manera que la memoria de datos. En los microcontroladores la memoria de programa es normalmente una memoria no volátil (mantiene la información sin necesidad de alimentación), usualmente de tipo Flash.

La microarquitectura de los procesadores Cortex-M3 no es puramente Harvard sino Harvard Modificada, permitiendo mantener instrucciones en el espacio de memoria de datos, aunque el rendimiento del procesador es en ese caso menor por contar con un solo bus para instrucciones y datos.

## Periféricos

Los periféricos son componentes conectados a la computadora que permiten efecutar operaciones de entrada/salida. Son el mecanismo que acopla la computadora a su entorno. Normalmente son conectados al procesador por un bus de menor rendimiento que el de la memoria principal. Un componente conocido como puente (bridge) conecta el bus de alta velocidad del procesador al bus de baja velocidad de los periféricos. Los periféricos se comunican con el microporcesador a través de registros de los mismos, que son accedidos como si se tratase de memoria de datos. En el caso de los procesadores x86, por razones históricas, parte de los registros de los periféricos están en un espacio de direcciones separado que es accedido mediante instrucciones especiales. Los procesadores modernos suelen mantener un espacio de direcciónes único para memoria de datos y periféricos. La distinción entre memoria y periféricos se hace en base a su posición en el espacio de direcciones. Ese es el caso de los procesadores Cortex-M3.

## Arquitecturas RISC y CISC

El término *RISC* (Reduced Instruction Set Computer, computadora de conjunto de instrucciones reducido) describe una *arquitectura de computadora* donde cada instrucción efectúa una sola clase de operación, sea procesamiento de datos, acceso a memoria, modificación del flujo de ejecución, control del sistema, etc. En esta arquitectura notablemente las operaciones de acceso a memoria son separadas de las operaciones de procesamiento de datos, esta característica se suele describir como arquitectura de carga-almacenamiento, por la necesidad de cargar de memoria los operandos y almacenar el resultado como pasos individuales, o arquitectura registro-registro porque las operaciones de procesamiento de datos toman sus operandos de registros y escriben su resultado en registros. Ver [@null_lobur] y [@hennessy_patterson].

En el momento que se acuñó el término *RISC*, se empleó el término *CISC* (Complex Instruction Set Computer, computadora de conjunto de instrucciones complejo) para referirse a toda arquitectura que no siga los preceptos *RISC*. Esto es, cualquier arquitectura que incluya instrucciones que realizan más de una clase de operación, que era la tendencia del momento. Por ejemplo, la instrucción de suma de una computadora CISC puede sumar un número en un registro con un número cargado desde memoria y almacenar el resultado en memoria, este mismo proceso reuqiere tres instrucciones (carga, suma, almacenamiento) y usa al menos un registro extra en una máquina RISC. Ver [@null_lobur] y [@hennessy_patterson].

## Máquina de Von Newmann y microarquitectura de Von Newmann

La máquina de Von Newmann o computadora de programa almacenado es un modelo teórico de computadora donde el programa es almacenado en el mismo espacio de memoria que los datos. Se suele llamar arquitectura Von Newmann a una microarquitectura donde existe un único bus que comunica al procesador con la memoria de programa y la memoria de datos (y el programa está en muchos casos en la misma memoria física que los datos). La mayor parte de las computadoras modernas son lógicamente máquinas de Von Newmann, tratando en forma unificada la memoria de datos y de programa. Las microarquitecturas modernas, por otro lado, cuentan generalmente con dos buses separados para datos e instrucciones. Esto permite de manera simultánea leer la siguiente instrucción del programa y acceder a la memoria de datos. [@null_lobur]

## Máquina de Harvard y microarquitectura de Harvard

La máquina de Harvard es un modelo teórico de computadora donde el programa se encuentra almacenado en una memoria independiente de la memoria de datos. La memoria de programa está conectada al procesador por un bus independiente y no puede ser accedida de la misma forma que la memoria de datos, ni pueden ejecutarse programas almacenados en la memoria de datos.

Si bien es raro encontrar una máquina moderna que responda al modelo de Harvard estricto (suele usarse en los microcontroladores más simples como los PIC serie 16 por ejemplo), la mayor parte de las máquinas modernas cuentan con buses separados de datos e instrucciones para poder cargar instrucciones y acceder a la memoria de datos en forma simultánea. En este caso la memoria de programa es accesible también desde el bus de datos. Estas microarquitecturas se denominan denominarse Arquitecturas de Harvard Modificadas. [@null_lobur]

## 

## Referencias

:::{#refs}
:::